------HW2
select ad_date ,
	   campaign_id,
	   sum(spend) as sum_spend,
	   sum(impressions) as sum_impressions,
	   sum(clicks) as sum_clicks,
	   sum(value) as sum_value,
	   sum(spend)::numeric / sum(clicks)  as cpc,
	   1000*(sum(spend)::numeric / sum(impressions)) as cpm,
	   100*(sum(clicks)::numeric / sum(impressions)) as ctr,
	   100*((sum(value)::numeric  - sum(spend))  / sum(spend)) as romi
from facebook_ads_basic_daily fabd 
where clicks > 0
group by ad_date,
		 campaign_id 
order by ad_date  desc
;

---ROMI 
select campaign_id,
	   sum(spend) as sum_spend,
	   sum(value) as sum_value,
	   100*((sum(value)::numeric  - sum(spend))  / sum(spend)) as romi
from facebook_ads_basic_daily fabd 
where clicks > 0
group by campaign_id 
having sum(spend)> 500000
order by romi desc
;

-------HW3
with all_ad_data as (
	select ad_date,
	   	   'facebook' as media_source,
	   		spend, 
	   		impressions, 
	   		reach, 
	  		clicks, 
	   		leads, 
	   		value
	from facebook_ads_basic_daily fabd 
union
	select ad_date,
	   	  'google' as media_source,
	   	   spend, 
	   	   impressions, 
	   	   reach, 
	       clicks, 
	       leads, 
	       value
	from google_ads_basic_daily gabd
)
select ad_date,
	   media_source,
	   sum(spend) as sum_spend,
	   sum(impressions) as sum_impressions,
	   sum(clicks) as sum_clicks,
	   sum(value) as sum_value
from all_ad_data
group by ad_date, media_source
;

-------HW4
with all_ad_data as (
	select fabd.ad_date,
			'facebook' as media_source,
	   		fc.campaign_name,
	   		fa.adset_name,
	  		fabd.spend, 
	   		fabd.impressions, 
	   		fabd.reach, 
	   		fabd.clicks, 
	   		fabd.leads, 
	   		fabd.value
	from facebook_ads_basic_daily fabd 
	join facebook_adset fa on fabd.adset_id = fa.adset_id
	join facebook_campaign fc on fc.campaign_id = fabd.campaign_id
union all 
	select ad_date,
			'google' as media_source,
	   		campaign_name,
	   		adset_name,
	   		spend, 
	   		impressions, 
	   		reach, 
	   		clicks, 
	   		leads, 
	   		value 	   
	from google_ads_basic_daily gabd
)
select ad_date,
	   media_source,
	   campaign_name,
	   adset_name,
	   sum(spend) as sum_spend,
	   sum(impressions) as sum_impressions,
	   sum(clicks) as sum_clicks,
	   sum(value) as sum_value
from all_ad_data
group by ad_date, 
		media_source, 
		campaign_name,
		adset_name
;

--BONUS

with all_ad_data as (
	select fabd.ad_date,
	   		fc.campaign_name,
	   		fa.adset_name,
	  		fabd.spend,  
	   		fabd.value
	from facebook_ads_basic_daily fabd 
	join facebook_adset fa on fabd.adset_id = fa.adset_id
	join facebook_campaign fc on fc.campaign_id = fabd.campaign_id
union all 
	select ad_date,
	   		campaign_name,
	   		adset_name,
	   		spend, 
	   		value 	   
	from google_ads_basic_daily gabd
)
select campaign_name,
		adset_name,
	   sum(spend) as sum_spend,
	   sum(value) as sum_value,
	   round(((sum(value)::numeric  - sum(spend))  / sum(spend))*100.0,2) as romi	   
from all_ad_data
group by campaign_name, adset_name 
having sum(spend)> 500000
order by romi desc
limit 1
;
----------HW6
with all_ad_data as (
	select fabd.ad_date,
			fabd.url_parameters,
			fc.campaign_name,
	  		coalesce(fabd.spend, 0) as spend,
	   		coalesce(fabd.impressions, 0) as impressions, 
	   		coalesce(fabd.reach, 0) as reach, 
	   		coalesce(fabd.clicks, 0) as clicks, 
	   		coalesce(fabd.leads, 0) as leads,
	   		coalesce(fabd.value, 0) as value 
	from facebook_ads_basic_daily fabd 
	join facebook_adset fa on fabd.adset_id = fa.adset_id
	join facebook_campaign fc on fc.campaign_id = fabd.campaign_id
union all 
	select ad_date,
			url_parameters,
			campaign_name,
	   		coalesce(spend, 0) as spend, 
	   		coalesce(impressions, 0) as impressions, 
	   		coalesce(reach, 0) as reach, 
	   		coalesce(clicks, 0) as clicks, 
	   		coalesce(leads, 0) as leads, 
	   		coalesce(value, 0) as value 	   
	from google_ads_basic_daily gabd
)
select ad_date,
	   campaign_name,
	   lower(case when substring(url_parameters from 'utm_campaign=([^&]+)') = 'nan' THEN NULL
       else substring(url_parameters from 'utm_campaign=([^&]+)')
       end) as utm_campaign,
	   sum(spend) as sum_spend,
	   sum(impressions) as sum_impressions,
	   sum(clicks) as sum_clicks,
	   sum(value) as sum_value,
	   case when sum(clicks)> 0 then  sum(spend)/sum(clicks) else 0 end as cpc,
	   case when sum(impressions)>0 then (sum(spend)::numeric / sum(impressions))*1000  else 0 end as cpm,
	   case when sum(impressions)>0 then (sum(clicks)::numeric / sum(impressions))*100  else 0 end  as ctr,
	   case when sum(spend)>0 then round(((sum(value)::numeric  - sum(spend))  / sum(spend))*100.0,2)  else 0 end as romi
from all_ad_data
group by ad_date,
		campaign_name,
		utm_campaign
;

---BONUS
 
with all_ad_data as (
	select fabd.ad_date,
			fabd.url_parameters,
			fc.campaign_name,
	  		coalesce(fabd.spend, 0) as spend,
	   		coalesce(fabd.impressions, 0) as impressions, 
	   		coalesce(fabd.reach, 0) as reach, 
	   		coalesce(fabd.clicks, 0) as clicks, 
	   		coalesce(fabd.leads, 0) as leads,
	   		coalesce(fabd.value, 0) as value 
	from facebook_ads_basic_daily fabd 
	join facebook_adset fa on fabd.adset_id = fa.adset_id
	join facebook_campaign fc on fc.campaign_id = fabd.campaign_id
union all 
	select ad_date,
			url_parameters,
			campaign_name,
	   		coalesce(spend, 0) as spend, 
	   		coalesce(impressions, 0) as impressions, 
	   		coalesce(reach, 0) as reach, 
	   		coalesce(clicks, 0) as clicks, 
	   		coalesce(leads, 0) as leads, 
	   		coalesce(value, 0) as value 	   
	from google_ads_basic_daily gabd
)
select ad_date,
	   campaign_name,
	   lower(case when substring(decode_url_part(url_parameters) from 'utm_campaign=([^&]+)') = 'nan' THEN NULL
       else substring(decode_url_part(url_parameters) from 'utm_campaign=([^&]+)')
       end) as utm_campaign,
	   sum(spend) as sum_spend,
	   sum(impressions) as sum_impressions,
	   sum(clicks) as sum_clicks,
	   sum(value) as sum_value,
	   case when sum(clicks)> 0 then  sum(spend)/sum(clicks) else 0 end as cpc,
	   case when sum(impressions)>0 then (sum(spend)::numeric / sum(impressions))*1000  else 0 end as cpm,
	   case when sum(impressions)>0 then (sum(clicks)::numeric / sum(impressions))*100  else 0 end  as ctr,
	   case when sum(spend)>0 then round(((sum(value)::numeric  - sum(spend))  / sum(spend))*100.0,2)  else 0 end as romi
from all_ad_data
group by ad_date,
		campaign_name,
		utm_campaign
;

------------HW7
with all_ad_data as (
	select fabd.ad_date,
			fabd.url_parameters,
			fc.campaign_name,
	  		coalesce(fabd.spend, 0) as spend,
	   		coalesce(fabd.impressions, 0) as impressions, 
	   		coalesce(fabd.reach, 0) as reach, 
	   		coalesce(fabd.clicks, 0) as clicks, 
	   		coalesce(fabd.leads, 0) as leads,
	   		coalesce(fabd.value, 0) as value 
	from facebook_ads_basic_daily fabd 
	join facebook_adset fa on fabd.adset_id = fa.adset_id
	join facebook_campaign fc on fc.campaign_id = fabd.campaign_id
union all 
	select ad_date,
			url_parameters,
			campaign_name,
	   		coalesce(spend, 0) as spend, 
	   		coalesce(impressions, 0) as impressions, 
	   		coalesce(reach, 0) as reach, 
	   		coalesce(clicks, 0) as clicks, 
	   		coalesce(leads, 0) as leads, 
	   		coalesce(value, 0) as value 	   
	from google_ads_basic_daily gabd
), test as (
select date_trunc('month', ad_date)::date  AS ad_month,
	   lower(case when substring(url_parameters from 'utm_campaign=([^&]+)') = 'nan' THEN NULL
       else substring(url_parameters from 'utm_campaign=([^&]+)')
       end) as utm_campaign,
	   sum(spend) as sum_spend,
	   sum(impressions) as sum_impressions,
	   sum(clicks) as sum_clicks,
	   sum(value) as sum_value,
	   case when sum(clicks)> 0 then  sum(spend)/sum(clicks) else 0 end as cpc,
	   case when sum(impressions)>0 then round ((sum(clicks)::numeric / sum(impressions))*100.0,2)  else 0 end  as ctr,
	   case when sum(impressions)>0 then round ((sum(spend)::numeric / sum(impressions))*1000.0,2)  else 0 end as cpm,
	   case when sum(spend)>0 then round(((sum(value)::numeric  - sum(spend))  / sum(spend))*100.0,2)  else 0 end as romi
from all_ad_data 
group by ad_month,
		utm_campaign)
select ad_month,
		utm_campaign,
		sum_spend,
		sum_impressions,
		sum_clicks,
		sum_value,
		cpc,
		cpm,
		lag (cpm) over (partition by utm_campaign order by ad_month) as prev_cpm,
		round(((cpm/lag (cpm) over (partition by utm_campaign order by ad_month))-1)*100.0,2)as diff_cpm_persent,
		ctr,
		lag (ctr) over (partition by utm_campaign order by ad_month) as prev_ctr,
		round(((ctr/lag (ctr) over (partition by utm_campaign order by ad_month))-1)*100.0,2)as diff_ctr_persent,
		romi,
		lag (romi) over (partition by utm_campaign order by ad_month) as prev_romi,
		round(((romi/lag (romi) over (partition by utm_campaign order by ad_month))-1)*100.0,2)as diff_romi_persent
from test
;
